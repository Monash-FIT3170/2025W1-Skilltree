generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique
  hash                  String?
  createdCommunities    Community[]    @relation("CreatedCommunities")
  adminOfCommunities    Community[]    @relation("AdminCommunities")
  verifiedInCommunities Community[]    @relation("VerifiedInCommunities")
  posts                 Post[]         @relation("UserPosts")
  skillForests          SkillForest[]  @relation("UserSkillForests")
  followedSkillForests  SkillForest[]  @relation("UserFollowsSkillForest")
  experiences           Experience[]   @relation("UserExperiences")
  leaderboardEntries    Leaderboard[]  @relation("LeaderboardUsers")
  feedback              Feedback[]     @relation("UserFeedback")
  verifications         Verification[] @relation("UserVerifications")
  events                Event[]        @relation("UserEvents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

model Community {
  id                  String          @id @default(cuid())
  name                String
  skill               String
  icon                String?
  tags                String[]
  description         String?
  communityExperience Int?
  creatorId           String
  creator             User            @relation("CreatedCommunities", fields: [creatorId], references: [id])
  admins              User[]          @relation("AdminCommunities")
  verifiedUsers       User[]          @relation("VerifiedInCommunities")
  skillTreeNodes      SkilltreeNode[] @relation("CommunitySkillTreeNodes")
  posts               Post[]          @relation("CommunityPosts")
  skillForests        SkillForest[]   @relation("CommunitySkillForests")
  experiences         Experience[]    @relation("CommunityExperiences")
  leaderboards        Leaderboard[]   @relation("CommunityLeaderboards")
  verifications       Verification[]  @relation("CommunityVerifications")
  events              Event[]         @relation("CommunityEvents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model SkilltreeNode {
  id           String         @id @default(cuid())
  name         String
  communityId  String
  community    Community      @relation("CommunitySkillTreeNodes", fields: [communityId], references: [id])
  experienceId String
  experience   Experience     @relation(fields: [experienceId], references: [id])
  nextId       String?        @unique
  next         SkilltreeNode? @relation("NodeSequence", fields: [nextId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  previous     SkilltreeNode? @relation("NodeSequence")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([experienceId])
}

model Post {
  id            String         @id @default(cuid())
  text          String
  attachment    String?
  communityId   String
  community     Community      @relation("CommunityPosts", fields: [communityId], references: [id])
  authorId      String
  author        User           @relation("UserPosts", fields: [authorId], references: [id])
  feedback      Feedback[]     @relation("PostFeedback")
  verifications Verification[] @relation("PostVerifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([authorId])
}

model SkillForest {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation("UserSkillForests", fields: [userId], references: [id])
  communities Community[] @relation("CommunitySkillForests")
  followers   User[]      @relation("UserFollowsSkillForest")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Experience {
  id             String          @id @default(cuid())
  amount         Int
  communityId    String
  community      Community       @relation("CommunityExperiences", fields: [communityId], references: [id])
  userId         String
  user           User            @relation("UserExperiences", fields: [userId], references: [id])
  skillTreeNodes SkilltreeNode[]
  leaderboards   Leaderboard[]   @relation("LeaderboardExperiences")
  events         Event[]         @relation("EventExperiences")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([userId])
}

model Leaderboard {
  id          String       @id @default(cuid())
  communityId String
  community   Community    @relation("CommunityLeaderboards", fields: [communityId], references: [id])
  users       User[]       @relation("LeaderboardUsers")
  experiences Experience[] @relation("LeaderboardExperiences")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
}

model Feedback {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserFeedback", fields: [userId], references: [id])
  postId String
  post   Post   @relation("PostFeedback", fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Verification {
  id          String    @id @default(cuid())
  communityId String
  community   Community @relation("CommunityVerifications", fields: [communityId], references: [id])
  userId      String
  user        User      @relation("UserVerifications", fields: [userId], references: [id])
  postId      String
  post        Post      @relation("PostVerifications", fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([userId])
  @@index([postId])
}

model Event {
  id               String     @id @default(cuid())
  rankedStatus     Boolean?
  experiencePayout Int?
  communityId      String
  community        Community  @relation("CommunityEvents", fields: [communityId], references: [id])
  userId           String
  user             User       @relation("UserEvents", fields: [userId], references: [id])
  experienceId     String
  experience       Experience @relation("EventExperiences", fields: [experienceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([communityId])
  @@index([userId])
  @@index([experienceId])
}
